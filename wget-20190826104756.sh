#!/bin/bash
##############################################################################
# ESG Federation download script
#
# Template version: 1.2
# Generated by esgf-index1.ceda.ac.uk - 2019/08/26 10:47:56
# Search URL: http://esgf-index1.ceda.ac.uk/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.MOHC.HadGEM2-ES.rcp45.day.atmos.day.r4i1p1.v20111205|esgf-data1.ceda.ac.uk
#
###############################################################################
# first be sure it's bash... anything out of bash or sh will break
# and the test will assure we are not using sh instead of bash
if [ $BASH ] && [ `basename $BASH` != bash ]; then
    echo "######## This is a bash script! ##############" 
    echo "Change the execution bit 'chmod u+x $0' or start with 'bash $0' instead of sh."
    echo "Trying to recover automatically..."
    sleep 1
    /bin/bash $0 $@
    exit $?
fi

version=1.3.2
CACHE_FILE=.$(basename $0).status
openId=
search_url='http://esgf-index1.ceda.ac.uk/esg-search/wget/?distrib=false&dataset_id=cmip5.output1.MOHC.HadGEM2-ES.rcp45.day.atmos.day.r4i1p1.v20111205|esgf-data1.ceda.ac.uk'

#These are the embedded files to be downloaded
download_files="$(cat <<EOF--dataset.file.url.chksum_type.chksum
'huss_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/huss/huss_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'SHA256' '2e615d03c0c3e612f7a4d3c79ce73fa0d62b8d57bcd72e5b6188066bd0d18749'
'huss_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/huss/huss_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'SHA256' '68c5449bbb7fb129cee71b32203934e9f6c67b34ae9e8928e17e6fb27d0f826b'
'huss_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/huss/huss_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'SHA256' 'ee58c55b6f18dea8a25c74a74fa395c40b6b2ecb6c83fd8bdf843d498236aef8'
'huss_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/huss/huss_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'SHA256' '45005a43791335c39a011b9f9d1f8025ebcf6878b8e5cb8d1e949b96ee105d13'
'huss_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/huss/huss_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'SHA256' '0a7f33b7550c852c625a374044ff73ff59d176e854766d712fd2646d8fca89a2'
'huss_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/huss/huss_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'SHA256' 'bf64fee39511aa06f30718307fb0d1e65500a00968b60837d421372e8b5b1097'
'huss_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/huss/huss_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'SHA256' '516a61a580b819de29a5adebe0a88d2e8adc107470ec98f4acdb044260bae3cb'
'huss_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/huss/huss_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'SHA256' '09a9c7d4f033a6410ae3ab6789c58768a0b1e3c67d777c266a70b087771a33ec'
'huss_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/huss/huss_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'SHA256' '61b711c4769545078312f71b7f45fb1820b6dada6e98900601695555f475134a'
'huss_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/huss/huss_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'SHA256' '8e50397cd90a86de479bd31e27c44a20559aac09fa8067d0c05df2e66b1da39c'
'huss_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/huss/huss_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'SHA256' 'ef40667a4b4af0ab0d8501e0eccb7344409cb9d212e0fe09a09dcf2c8dc331ee'
'pr_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/pr/pr_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'SHA256' '1b7702271daa1c43cc0a6cc88a2c0c0894b2726808297169eae921de20c052b2'
'pr_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/pr/pr_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'SHA256' 'a2f58dd899bdc7204c2d0c345943b267e69cb307ff97e022489d1046418773ec'
'pr_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/pr/pr_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'SHA256' '5b831991e3eb08fecb981f1dab72a8dc1d82775b4d9c94c3622603f9fb8863ac'
'pr_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/pr/pr_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'SHA256' '6084a62fd6953f21a9e4e693bad320729ba2aa186665939a84d32cb2eb041de8'
'pr_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/pr/pr_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'SHA256' '5db8345711dc54ad923a3716a0bb3b4db7bb61b543b241bdcd3f402327b78d74'
'pr_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/pr/pr_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'SHA256' '66b2fefbe004fed6e9a19d3a1176431d810475ce409fe21222a8cd60aed4300b'
'pr_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/pr/pr_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'SHA256' '4697d4a2c328a10f47a6eecbcd41b3f15a5f60a600c924384f247039a88074b5'
'pr_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/pr/pr_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'SHA256' '93c2d54a783a0e54b6cbae24f4b3a3965049c5f6426593dcc6b8da10bab4b581'
'pr_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/pr/pr_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'SHA256' 'e5468d9e0393a4da04af8f6bd8199e851062b32fc14a3cdaac0e570743eb37f6'
'pr_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/pr/pr_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'SHA256' '48b9efd916bfc5b9b6cf75f59cf94fb476d16732c8655abf0b72aa96505e2bb3'
'pr_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/pr/pr_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'SHA256' '0a5f30f3e556b25f514844612178fa9a1dfc896419f1bdccabf028a7334226da'
'psl_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/psl/psl_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'SHA256' 'f1e8245a04375622590d15c5334383e2e1cd27afe9e53282699634ad9df0a911'
'psl_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/psl/psl_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'SHA256' 'af9756cd24c83238cd93c4006682249a8077c67a715bad0c2b881e08ee6de2c0'
'psl_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/psl/psl_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'SHA256' '5a21aba52dbd908743743d94906171e54291a66a9c2dc9ea9ca9272c5a26b943'
'psl_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/psl/psl_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'SHA256' 'aa2bdcaf347a9a41521054405c882231de82af73b2ceca7b92be975c3e742666'
'psl_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/psl/psl_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'SHA256' '87b3999de55c20ccc38a63af2bc4443bc3bb4b367062307a13a2d7b83874907b'
'psl_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/psl/psl_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'SHA256' '44d63e22379630a1680b18236f9413bcf7e33f79b0656e4f5ed70eff0d60d3f6'
'psl_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/psl/psl_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'SHA256' '4c8af28c69b67a9f0e70d7c28e2d93c4033c48b90ea7fcb82d475d7efbc6582e'
'psl_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/psl/psl_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'SHA256' '60c9deb0765b1fd769c77cc506d4926c38c3b24b23244492052845e4a1a02316'
'psl_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/psl/psl_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'SHA256' '2803803cd49a74035404885aa3a606c2670bcd7b071bf442d0b045dcf22a5b5d'
'psl_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/psl/psl_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'SHA256' '3b95a382ff3b23c37a0cfdeebcc0c3f58a93fe961aaac6fbb534f20fdffdb18f'
'psl_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/psl/psl_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'SHA256' '91e8ccc4fa64de947f3446d4a0363bb5667379d071b54102c6791a177a83075f'
'sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/sfcWind/sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'SHA256' '7f1cc060c756fa5cb4fa6159aaf3016eb41b3b6c0addfd5207c2cb0587556146'
'sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/sfcWind/sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'SHA256' 'ed7f2321d19f63a7d04af1b4d64f1ba00d0db65ab1b8e7b5e5d11107bbcd2000'
'sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/sfcWind/sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'SHA256' '7d6b482085b9a49f21cfc9b5160e0e6fc5209113e000739db82371237f7a78a2'
'sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/sfcWind/sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'SHA256' '4339c649890feff21e2156674e3c8daa4f4ddfe00072224a2b1b5892504a15b2'
'sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/sfcWind/sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'SHA256' '7d4bdccee1ba50e3753cd8ab572269adb59379b88f180bda2f16689ef052f684'
'sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/sfcWind/sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'SHA256' '173738b4fd87e9bc5495e2c5ea63823fe4d20d2fe937806b10a65d6dca779afe'
'sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/sfcWind/sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'SHA256' '417851970fd3828edcaf020c23725bfd9f0e78bd7b015423700a505a984a596e'
'sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/sfcWind/sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'SHA256' '231a4116a9ab00b164f9bf6aa453a31ac05525c132521a1c1846e44903a9de08'
'sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/sfcWind/sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'SHA256' '0464a9f2ac8bc3d4d94e70d3ae0555a1e05dcb27f310bf7c200574457275d9be'
'sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/sfcWind/sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'SHA256' '824c19468b4fc4e7e8b1a90c8d5839b8646de0f26ef58a6cf2236aa7fb15c77c'
'sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/sfcWind/sfcWind_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'SHA256' 'e3115f3ef259d9c90abf02113cd41a75413c34890f7965c96440bcb986a052e1'
'tas_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tas/tas_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'SHA256' '3570ba2af8a76d0310fc5d3d07e975e8ae722a3601f0132b8608557c806ebb54'
'tas_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tas/tas_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'SHA256' 'ba5d6eb89c2708fc2305d97aa5317dea6df462c1748fb4170e024542f0eb8059'
'tas_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tas/tas_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'SHA256' 'e05f9f6deb2e25f301bab911f8ae86475e67ec9053dfb57c5403cb929e55765d'
'tas_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tas/tas_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'SHA256' '088b3f3a1b53e485eb483bb53f17be4e67d2ae5dd3a14a7f2953eded268e18eb'
'tas_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tas/tas_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'SHA256' '71682d2de61d27d055cef86cb7322c9f1016c461845f91512957d65c13c1cc3a'
'tas_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tas/tas_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'SHA256' '803fbebfbcce8477ed0042e7fad20ff0f2eca2c4aee1f03ce1500244b7f75a08'
'tas_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tas/tas_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'SHA256' 'd85197bf58c6f825f6e76f9e6640cca699758ead511330635abf449ccbb279d3'
'tas_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tas/tas_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'SHA256' '2766020e062006891a41bb2874fb3e86d9cbf41a8383901ec0e1d158ef81d806'
'tas_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tas/tas_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'SHA256' 'f23160099a4bf05ee406693e3743a71306419aee377be3558ab0e57bbed0e2e5'
'tas_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tas/tas_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'SHA256' 'ba00d247d5289613d69c9a1e22e951755d5363536af465c5a60a5f5f46ca2a1f'
'tas_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tas/tas_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'SHA256' '14bc06a2e5ef73ec11951cac0835401fc8556586198f42da3fb9bfa5f2c38681'
'tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmax/tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'SHA256' '6ec376e91799ac538c207c353f75d6a00c18e7e4b4de043849f9f7170a4c4e70'
'tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmax/tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'SHA256' '1424876000972558413dc3840eb7956ebc87b16a9f32f46c75892986c879bfe2'
'tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmax/tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'SHA256' '3740b9907feb04a45230fe588f0e8484135a096757024ae29e91c2a1ff5fb60f'
'tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmax/tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'SHA256' '11b92a6f8e07fb9f6a43d48790b18d82a9be338ea96ecd18db20cd014db91b26'
'tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmax/tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'SHA256' '26def0c1423bcc7af9ce8938beaceec6fc197a072ad7ffacddfe52e2d28418df'
'tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmax/tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'SHA256' '02ad60184e4f4fe5509d694af3720393edc576e43fb9c02090cbe5f406b2d928'
'tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmax/tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'SHA256' 'a9301d4d9e8deed3ad118f5aa5ad581ee98519ea5d3e20f1de2e2c1e9f9a5e9a'
'tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmax/tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'SHA256' 'da5eafd0e98d5a56bab9fbfbb6fae9c748108aa5d6449a8c603d917719b89385'
'tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmax/tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'SHA256' 'e86573ddcd59a25c64c4239ecc95bd920dd3ce141952d1a6ba224717746f9f4e'
'tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmax/tasmax_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'SHA256' '99b03eb77f6ad80894c0662f4270f7f362fa9531b2862dc6a89320a2eefb4ec8'
'tasmax_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmax/tasmax_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'SHA256' 'e13252fb0d46e26865aac6703afc66a30acb1be8fed7fc3a57f36872a6a33576'
'tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmin/tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20051201-20151130.nc' 'SHA256' '092abbc88f077034a2a07e53a89ee0b2af1a6dc7a1ae49c7f377d4ea31738a31'
'tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmin/tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20151201-20251130.nc' 'SHA256' '8f0f2972487c93149c309f5a248aad0a6dd28c139e447261b4c49d0e39689c2b'
'tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmin/tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20251201-20351130.nc' 'SHA256' 'ac58e0d91cb91270d0b4d5ee647c0b9d3fe437aa6b0361c27cfe7bf7bc94c24f'
'tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmin/tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20351201-20451130.nc' 'SHA256' '5a401a208a0d0a05c3273579fed705b3900f717b136c5346c73ed0864279cc50'
'tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmin/tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20451201-20551130.nc' 'SHA256' 'a0a36364d0dbd8a43cfe05f30a1e0ac3e399213a3b01e214b31f84eeab9b1183'
'tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmin/tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20551201-20651130.nc' 'SHA256' '537db9c3fb19940054bbdc611a5ebe6bf09af723aca93ab84339aa2e5c23b488'
'tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmin/tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20651201-20751130.nc' 'SHA256' '95ba0973e4ce0d2052adc7fca07ae48f2e1076395c05561a495738fe5730b3d7'
'tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmin/tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20751201-20851130.nc' 'SHA256' '1c0471275e25414937ea3d6b4a6d18ceab77cf42c7bd802daea38d3380c46270'
'tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmin/tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20851201-20951130.nc' 'SHA256' '2cbdf7e089ab48b4d49e07183139603c655f8b9a892e8c6952f5ce44e78e2fab'
'tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmin/tasmin_day_HadGEM2-ES_rcp45_r4i1p1_20951201-21001130.nc' 'SHA256' 'c338ef79ef1b7c8479fdde1401d3b89d987c5d0b4dd3b2da3139c1ecf6da307a'
'tasmin_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'http://esgf-data1.ceda.ac.uk/thredds/fileServer/esg_dataroot/cmip5/output1/MOHC/HadGEM2-ES/rcp45/day/atmos/day/r4i1p1/v20111205/tasmin/tasmin_day_HadGEM2-ES_rcp45_r4i1p1_21001201-21001230.nc' 'SHA256' '9544fe8732d54f803f78c0d0166fd1ae37e5ed7a9515185777b737139c15a231'
EOF--dataset.file.url.chksum_type.chksum
)"

# ESG_HOME should point to the directory containing ESG credentials.
#   Default is $HOME/.esg
ESG_HOME=${ESG_HOME:-$HOME/.esg}
[[ -d $ESG_HOME ]] || mkdir -p $ESG_HOME

ESG_CREDENTIALS=${X509_USER_PROXY:-$ESG_HOME/credentials.pem}
ESG_CERT_DIR=${X509_CERT_DIR:-$ESG_HOME/certificates}
MYPROXY_STATUS=$HOME/.MyProxyLogon
COOKIE_JAR=$ESG_HOME/cookies
MYPROXY_GETCERT=$ESG_HOME/getcert.jar
CERT_EXPIRATION_WARNING=$((60 * 60 * 8))   #Eight hour (in seconds)

WGET_TRUSTED_CERTIFICATES=$ESG_HOME/certificates


# Configure checking of server SSL certificates.
#   Disabling server certificate checking can resolve problems with myproxy
#   servers being out of sync with datanodes.
CHECK_SERVER_CERT=${CHECK_SERVER_CERT:-Yes}

check_os() {
    local os_name=$(uname | awk '{print $1}')
    case ${os_name} in
        Linux)
            ((debug)) && echo "Linux operating system detected"
            LINUX=1
            MACOSX=0
            ;;
        Darwin)
            ((debug)) && echo "Mac OS X operating system detected"
            LINUX=0
            MACOSX=1
            ;;
        *)
            echo "Unrecognized OS [${os_name}]"
            return 1
            ;;
    esac
    return 0
}

#taken from http://stackoverflow.com/a/4025065/1182464
vercomp () {
    if [[ $1 == $2 ]]
    then
        return 0
    fi
    local IFS=.
    local i ver1=($1) ver2=($2)
    # fill empty fields in ver1 with zeros
    for ((i=${#ver1[@]}; i<${#ver2[@]}; i++))
    do
        ver1[i]=0
    done
    for ((i=0; i<${#ver1[@]}; i++))
    do
        if [[ -z ${ver2[i]} ]]
        then
            # fill empty fields in ver2 with zeros
            ver2[i]=0
        fi
        if ((10#${ver1[i]} > 10#${ver2[i]}))
        then
            return 1
        fi
        if ((10#${ver1[i]} < 10#${ver2[i]}))
        then
            return 2
        fi
    done
    return 0
}

check_commands() {
    #check wget
    local MIN_WGET_VERSION=1.10
    vercomp $(wget -V | sed -n 's/^.* \([1-9]\.[0-9.]*\) .*$/\1/p') $MIN_WGET_VERSION
    case $? in
        2) #lower
            wget -V
            echo
            echo "** ERROR: wget version is too old. Use version $MIN_WGET_VERSION or greater. **" >&2
            exit 1
    esac
}

usage() {
    echo "Usage: $(basename $0) [flags] [openid] [username]"
    echo "Flags is one of:"
    sed -n '/^while getopts/,/^done/  s/^\([^)]*\)[^#]*#\(.*$\)/\1 \2/p' $0
    echo
    echo "This command stores the states of the downloads in .$0.status"
    echo "For more information check the website: http://esgf.org/wiki/ESGF_wget"
}

#defaults
debug=0
clean_work=1

#parse flags
while getopts ':c:pfF:o:w:isuUndvqhHI:T' OPT; do
    case $OPT in
        H) skip_security=1 && use_http_sec=1;; #       : Authenticate with OpenID (username,) and password, without the need for a certificate.
        T) force_TLSv1=1;;              #       : Forces wget to use TLSv1. 
        c) ESG_CREDENTIALS="$OPTARG";;  #<cert> : use this certificate for authentication.
        f) force=1;;                    #       : force certificate retrieval (defaults to only once per day); for certificate-less authentication (see -H option), this flag will force login and refresh cookies.
        F) input_file="$OPTARG";;       #<file> : read input from file instead of the embedded one (use - to read from stdin)
        o) openId="$OPTARG";;           #<openid>: Provide OpenID instead of interactively asking for it.
        I) username_supplied="$OPTARG";;    #<user_id> : Explicitly set user ID.  By default, the user ID is extracted from the last component of the OpenID URL.  Use this flag to override this behaviour.                   
        w) output="$OPTARG";;           #<file> : Write embedded files into a file and exit
        i) insecure=1;;                 #       : set insecure mode, i.e. don't check server certificate
        s) skip_security=1 && use_cookies_for_http_basic_auth_start=1;;            #       : completely skip security. It will only work if the accessed data is not secured at all. -- works only if the accessed data is unsecured or a certificate exists or cookies are saved (latter applies to -H option only).
        u) update=1;;                   #       : Issue the search again and see if something has changed.
        U) update_files=1;;             #       : Update files from server overwriting local ones (detect with -u)
        n) dry_run=1;;                  #       : Don't download any files, just report.
        p) clean_work=0;;               #       : preserve data that failed checksum
        d) verbose=1;debug=1;;          #       : display debug information
        v) verbose=1;;                  #       : be more verbose
        q) quiet=1;;                    #       : be less verbose
        h) usage && exit 0;;            #       : displays this help
        \?) echo "Unknown option '$OPTARG'" >&2 && usage && exit 1;;
        \:) echo "Missing parameter for flag '$OPTARG'" >&2 && usage && exit 1;;
    esac
done
shift $(($OPTIND - 1))

#setup input as desired by the user
if [[ "$input_file" ]]; then
    if [[ "$input_file" == '-' ]]; then
        download_files="$(cat)" #read from STDIN
        exec 0</dev/tty #reopen STDIN as cat closed it
    else
        download_files="$(cat $input_file)" #read from file
    fi
fi

#if -w (output) was selected write file and finish:
if [[ "$output" ]]; then
    #check the file
    if [[ -f "$output" ]]; then
        read -p "Overwrite existing file $output? (y/N) " answ
        case $answ in y|Y|yes|Yes);; *) echo "Aborting then..."; exit 0;; esac
    fi
    echo "$download_files">$output
    exit
fi


#assure we have everything we need
check_commands

if ((update)); then
    echo "Checking the server for changes..."
    new_wget="$(wget "$search_url" -qO -)"
    compare_cmd="grep -vE '^(# Generated by|# Search URL|search_url=)'"
    if diff -q <(eval $compare_cmd<<<"$new_wget") <(eval $compare_cmd $0) >/dev/null; then
        echo "No changes detected."
    else
        echo "Wget was changed. Dowloading. (old renamed to $0.old.#N)"
        counter=0
        while [[ -f $0.old.$counter ]]; do ((counter++)); done
        mv $0 $0.old.$counter
        echo "$new_wget" > $0
    fi
    exit 0      
fi


##############################################################################
check_java() {
    if ! type java >& /dev/null; then
        echo "Java could not be found." >&2
        return 1
    fi
    jversion=($(jversion=$(java -version 2>&1 | awk '/version/ {gsub("\"","");print $3}'); echo ${jversion//./ }))
    mVer=${jversion[1]}
    if ((mVer<5)); then
        echo "Java version 1.5+ is required for retrieving the certificate." >&2
        echo "Current version seems older: $(java -version | head -n1) " >&2  
        return 1
    fi
}

check_myproxy_logon() {
    if ! type myproxy-logon >& /dev/null; then
	echo "myproxy-logon could not be found." >&2
	return 1
    fi
    echo "myproxy-logon found" >&2
}

proxy_to_java() {
    local proxy_user proxy_pass proxy_server proxy_port
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$http_proxy)
    local JAVA_PROXY=
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttp.proxyPort=$proxy_port"
    eval $(sed 's#^\(https\?://\)\?\(\([^:@]*\)\(:\([^@]*\)\)\?@\)\?\([^:/]*\)\(:\([0-9]*\)\)\?.*#proxy_user=\3;proxy_pass=\5;proxy_server=\6;proxy_port=\8#'<<<$https_proxy)
    [[ "$proxy_server" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyHost=$proxy_server"
    [[ "$proxy_port" ]] && JAVA_PROXY=$JAVA_PROXY" -Dhttps.proxyPort=$proxy_port"
    
    echo "$JAVA_PROXY"
}

# get certificates from github
get_certificates() {
    # don't if this was already done today
    [[ -z $force && "$(find $ESG_CERT_DIR -type d -mtime -1 2>/dev/null)" ]] && return 0
    echo -n "Retrieving Federation Certificates..." >&2

    if ! wget -O $ESG_HOME/esg-truststore.ts --no-check-certificate https://github.com/ESGF/esgf-dist/raw/master/installer/certs/esg-truststore.ts; then
        echo "Could not fetch esg-truststore";
        return 1
    fi
    
    if ! wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar -O - -q | tar x -C $ESG_HOME; then
        #certificates tarred into esg_trusted_certificates. (if it breaks, let the user know why
        wget --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/esg_trusted_certificates.tar
        echo "Could't update certs!" >&2
        return 1
    else
        #if here everythng went fine. Replace old cert with this ones    
        [[ -d $ESG_CERT_DIR ]] && rm -r $ESG_CERT_DIR || mkdir -p $(dirname $ESG_CERT_DIR)
        mv $ESG_HOME/esg_trusted_certificates $ESG_CERT_DIR
        touch $ESG_CERT_DIR
        echo "done!" >&2
    fi

}

# Retrieve ESG credentials
unset pass
get_credentials() {
    if check_java
    then
	use_java=1
    else	
	use_java=0
	echo "No suitable java for obtaining certificate - checking for myproxy-logon instead" >&2
	check_myproxy_logon || exit 1
    fi
    #get all certificates
    get_certificates

    if [[ -z "$(find $MYPROXY_GETCERT -type f -mtime -1 2>/dev/null)" ]]; then
        echo -n "(Downloading $MYPROXY_GETCERT... "
        mkdir -p $(dirname $MYPROXY_GETCERT)
        if wget -q --no-check-certificate https://raw.githubusercontent.com/ESGF/esgf-dist/master/installer/certs/getcert.jar -O $MYPROXY_GETCERT;then
            echo 'done)'
            touch $MYPROXY_GETCERT
        else
            echo 'failed)'
        fi
    fi

    #if the user already defined one, use it
    if [[ -z $openId ]]; then
        #try to parse the last valid value if any
        [[ -f "$MYPROXY_STATUS" ]] && openId=$(awk -F= '/^OpenID/ {gsub("\\\\", ""); print $2}' $MYPROXY_STATUS)
        if [[ -z $openId ]]; then
            #no OpenID, we need to ask the user
            echo -n "Please give your OpenID (Example: https://myserver/example/username) ? "
        else
            #Allow the user to change it if desired
            echo -n "Please give your OpenID (hit ENTER to accept default: $openId)? "
        fi
        read -e
        [[ "$REPLY" ]] && openId="$REPLY"
    else
        ((verbose)) && echo "Using user defined OpenID $openId (to change use -o <open_id>)"
    fi

    if grep -q ceda.ac.uk <<<$openId; then
        username=${openId##*/}
        echo -n "Please give your username if different [$username]: "
        read -e
        [[ "$REPLY" ]] && username="$REPLY"
    fi
    


    if [ $use_java -eq 1 ]
    then
        local args=
        #get password
	[[ ! "$pass" ]] && read -sp "MyProxy Password? " pass
        [[ "$openId" ]] && args=$args" --oid $openId"
        [[ "$pass" ]] && args=$args" -P $pass"
        [[ "$username" ]] && args=$args" -l $username"
        
        echo -n $'\nRetrieving Credentials...' >&2
        if ! java $(proxy_to_java) -jar $MYPROXY_GETCERT $args --ca-directory $ESG_CERT_DIR --output $ESG_CREDENTIALS ; then        
            echo "Certificate could not be retrieved"
            exit 1
        fi
        echo "done!" >&2
    else
        args=`openid_to_myproxy_args $openId $username` || exit 1
        if ! myproxy-logon $args -b -o $ESG_CREDENTIALS
	then
            echo "Certificate could not be retrieved"
	    exit 1
        fi
	cp $HOME/.globus/certificates/* $ESG_CERT_DIR/	
    fi
}

openid_to_myproxy_args() {
  python - <<EOF || exit 1
import sys
import re
import xml.etree.ElementTree as ET
import urllib2
openid = "$1"
username = "$2" or re.sub(".*/", "", openid)
e = ET.parse(urllib2.urlopen(openid))
servs = [el for el in e.getiterator() if el.tag.endswith("Service")]
for serv in servs:
    servinfo = dict([(re.sub(".*}", "", c.tag), c.text)
                     for c in serv.getchildren()])
    try:
        if servinfo["Type"].endswith("myproxy-service"):
            m = re.match("socket://(.*):(.*)", servinfo["URI"])
            if m:
                host = m.group(1)
                port = m.group(2)
                print "-s %s -p %s -l %s" % (host, port, username)
                break
    except KeyError:
        continue
else:
    sys.stderr.write("myproxy service could not be found\n")
    sys.exit(1)
EOF
}

# check the certificate validity
check_cert() {
    if [[ ! -f "$ESG_CERT" || $force ]]; then
        #not there, just get it
        get_credentials
    elif which openssl &>/dev/null; then
        #check openssl and certificate
        if ! openssl x509 -checkend $CERT_EXPIRATION_WARNING -noout -in $ESG_CERT 2>/dev/null; then
            echo "The certificate expires in less than $((CERT_EXPIRATION_WARNING / 60 / 60)) hour(s). Renewing..."
            get_credentials
        else
            #ok, certificate is fine
            return 0
        fi
    fi
}

#
# Detect ESG credentials
#
find_credentials() {

    #is X509_USER_PROXY or $HOME/.esg/credential.pem
    if [[ -f "$ESG_CREDENTIALS" ]]; then
        # file found, proceed.
        ESG_CERT="$ESG_CREDENTIALS"
        ESG_KEY="$ESG_CREDENTIALS"
    elif [[ -f "$X509_USER_CERT" && -f "$X509_USER_KEY" ]]; then
        # second try, use these certificates.
        ESG_CERT="$X509_USER_CERT"
        ESG_KEY="$X509_USER_KEY"
    else
        # If credentials are not present, just point to where they should go 
        echo "No ESG Credentials found in $ESG_CREDENTIALS" >&2
            ESG_CERT="$ESG_CREDENTIALS"
            ESG_KEY="$ESG_CREDENTIALS"
            #they will be retrieved later one
    fi


    #chek openssl and certificate
    if (which openssl &>/dev/null); then
        if ( openssl version | grep 'OpenSSL 1\.0' ); then
            echo '** WARNING: ESGF Host certificate checking might not be compatible with OpenSSL 1.0+'
        fi
        check_cert || { (($?==1)); exit 1; }
    fi
    
    if [[ $CHECK_SERVER_CERT == "Yes" ]]; then
        [[ -d "$ESG_CERT_DIR" ]] || { echo "CA certs not found. Aborting."; exit 1; }
        PKI_WGET_OPTS="--ca-directory=$ESG_CERT_DIR"
    fi

    #some wget version complain if there's no file present
    [[ -f $COOKIE_JAR ]] || touch $COOKIE_JAR

    PKI_WGET_OPTS="$PKI_WGET_OPTS --certificate=$ESG_CERT --private-key=$ESG_KEY --save-cookies=$COOKIE_JAR --load-cookies=$COOKIE_JAR --ca-certificate=$ESG_CERT"

}

check_chksum() {
    local file="$1"
    local chk_type=$2
    local chk_value=$3
    local local_chksum=Unknown

    case $chk_type in
        md5) local_chksum=$(md5sum_ $file | cut -f1 -d" ");;
        sha256) local_chksum=$(sha256sum_ $file|awk '{print $1}'|cut -d ' ' -f1);;
        *) echo "Can't verify checksum." && return 0;;
    esac

    #verify
    ((debug)) && echo "local:$local_chksum vs remote:$chk_value" >&2
    echo $local_chksum
}

#Our own md5sum function call that takes into account machines that don't have md5sum but do have md5 (i.e. mac os x)
md5sum_() {
    hash -r
    if type md5sum >& /dev/null; then
        echo $(md5sum $@)
    else
        echo $(md5 $@ | sed -n 's/MD5[ ]*\(.*\)[^=]*=[ ]*\(.*$\)/\2 \1/p')
    fi
}

#Our own sha256sum function call that takes into account machines that don't have sha256sum but do have sha2 (i.e. mac os x)
sha256sum_() {
    hash -r
    if type sha256sum >& /dev/null; then
        echo $(sha256sum $@)
    elif type shasum >& /dev/null; then
        echo $(shasum -a 256 $@)
    else
        echo $(sha2 -q -256 $@)
    fi
}

get_mod_time_() {
    if ((MACOSX)); then
        #on a mac modtime is stat -f %m <file>
        echo "$(stat -f %m $@)"
    else
        #on linux (cygwin) modtime is stat -c %Y <file>
        echo "$(stat -c %Y $@)"
    fi
    return 0;
}

remove_from_cache() {
    local entry="$1"
    local tmp_file="$(grep -ve "^$entry" "$CACHE_FILE")"
    echo "$tmp_file" > "$CACHE_FILE"
    unset cached
}

#Download data from node using cookies and not certificates.
download_http_sec()
{
  #The data to be downloaded.
  data=" $url"
  filename="$file"  

  #Wget args.
  if ((insecure)) 
  then
   wget_args=" --no-check-certificate --cookies=on  --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt " 
  else
   wget_args=" --ca-directory=$WGET_TRUSTED_CERTIFICATES --cookies=on --keep-session-cookies --save-cookies $COOKIES_FOLDER/wcookies.txt "  
  fi 

  if ((use_cookies_for_http_basic_auth_start)) || ((use_cookies_for_http_basic_auth)) 
  then
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
  fi
  
  if((force_TLSv1))
  then
   wget_args=" $wget_args"" --secure-protocol=TLSv1 "
  fi
  
  
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
    wget_args="$wget_args $ESGF_WGET_OPTS"
  fi  
  

  #use cookies for the next downloads
  use_cookies_for_http_basic_auth=1;
   
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "wget $wget_args $data\n"
  fi


  #Try to download the data. 
  command="wget $wget_args -O $filename $data"
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
      
  #Extract orp service from url ?
  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" == 1 )) && 
  if  echo "$http_resp" | grep -q "/esg-orp/"      
  then
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   orp_service=$(echo "$urls" | tr '\n' ' ' | cut -d' ' -f 2)


   #Use cookies for transaction with orp.
   wget_args=" $wget_args"" --load-cookies $COOKIES_FOLDER/wcookies.txt"    
   
   #Download data using either http basic auth or http login form.
   if [[ "$openid_c" == */openid/  || "$openid_c" == */openid ]]
   then
    download_http_sec_open_id
   else
    download_http_sec_decide_service
   fi
  else  
   if    echo "$http_resp" | grep -q "401 Unauthorized"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || echo "$http_resp" | grep -q "Connection timed out."  \
      || echo "$http_resp" | grep -q "no-check-certificate"  \
      || (( $cmd_exit_status != 0 ))      
   then 
    echo "ERROR : http request to OpenID Relying Party service failed."
    failed=1
   fi
  fi
}


#Function that decides which implementaion of idp to use.
download_http_sec_decide_service()
{
  #find claimed id

  pos=$(echo "$openid_c" | egrep -o '/' | wc -l)
  username_c=$(echo "$openid_c"  | cut -d'/' -f "$(($pos + 1))")
  esgf_uri=$(echo "$openid_c" | egrep -o '/esgf-idp/openid/')

  host=$(echo "$openid_c"  | cut -d'/' -f 3)
  #test ceda first.

  if [[ -z "$esgf_uri" ]]
  then
   openid_c_tmp="https://""$host""/openid/"
  else
   openid_c_tmp="https://""$host""/esgf-idp/openid/" 
  fi

  command="wget "$openid_c_tmp" --no-check-certificate ${force_TLSv1:+--secure-protocol=TLSv1} -O-"
        
  if [[ ! -z "$ESGF_WGET_OPTS" ]]
  then
   command="$command $ESGF_WGET_OPTS"
  fi  
          
  #Debug message.
  if  ((debug))
  then
   echo -e "\nExecuting:\n"
   echo -e "$command\n"
  fi
            

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
  

  if    echo "$http_resp" | grep -q "[application/xrds+xml]"  \
     && echo "$http_resp" | grep -q "200 OK"  \
     && (( cmd_exit_status == 0 ))       
  then
   openid_c=$openid_c_tmp
   download_http_sec_open_id
  else
   if [[ -z "$esgf_uri" ]]
   then
    echo "ERROR : HTTP request to OpenID Relying Party service failed."
    failed=1
   else
   download_http_sec_cl_id
   fi
  fi
}


download_http_sec_retry()
{
  echo -e "\nRetrying....\n"
  #Retry in case that last redirect did not work, this happens with older version of wget.
  command="wget $wget_args $data"
      
  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi   
   
  http_resp=$(eval $command  2>&1) 
  cmd_exit_status="$?"

  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi
   
  if    echo "$http_resp" | grep -q "401 Unauthorized"  \
     || echo "$http_resp" | grep -q "403: Forbidden"  \
     || echo "$http_resp" | grep -q "Connection timed out."  \
     || echo "$http_resp" | grep -q "no-check-certificate"  \
     || (( $cmd_exit_status != 0 ))      
  then 
   echo -e "\nERROR : Retry failed.\n"
   #rm "$filename"
   failed=1
  fi #if retry failed.
}

#Function for downloading data using the claimed id.
download_http_sec_cl_id()
{
  #Http request for sending openid to the orp service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\"  $wget_args -O- https://$orp_service/esg-orp/j_spring_openid_security_check.htm "

  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "wget $command\n"
  fi 
  
  
  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"

  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 
    
  
  #Extract orp service from openid ?
  #Evaluate response.If redirected to idp service send the credentials.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( redirects == 2  )) && 
  if  echo "$http_resp" | grep -q "login.htm"  && (( cmd_exit_status == 0 ))   
  then 
  
   urls=$(echo "$http_resp" | egrep -o 'https://[^ ]+' | cut -d'/' -f 3)
   idp_service=$(echo "$urls"  | tr '\n' ' ' | cut -d' ' -f 2) 
      
   command="wget --post-data  password=\"$password_c\" $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$idp_service/esgf-idp/idp/login.htm"
   

   #Debug message.
   if  ((debug))
   then
    echo -e "Executing:\n"
    echo -e "wget $command\n"
   fi 

   #Execution of command.
   http_resp=$(eval $command  2>&1)
   cmd_exit_status="$?"
      
   if ((debug))
   then
    echo -e "\nHTTP response:\n $http_resp\n"
   fi 
        
   #Evaluate response. 
   #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
   #(( "$redirects" != 5 )) \ 
   if    echo "$http_resp" | grep -q "text/html"  \
      || echo "$http_resp" | grep -q "403: Forbidden"  \
      || (( cmd_exit_status != 0 ))        
   then 
    rm "$filename"
    download_http_sec_retry
   fi
 
  else
   echo "ERROR : HTTP request to OpenID Provider service failed."
   failed=1
  fi #if redirected to idp.  
}



download_http_sec_open_id()
{
  #Http request for sending openid to the orp web service.
  command="wget --post-data \"openid_identifier=$openid_c&rememberOpenid=on\" --header=\"esgf-idea-agent-type:basic_auth\" --http-user=\"$username_c\" --http-password=\"$password_c\"  $wget_args ${quiet:+-q} ${quiet:--v} -O $filename https://$orp_service/esg-orp/j_spring_openid_security_check.htm "


  #Debug message.
  if  ((debug))
  then
   echo -e "Executing:\n"
   echo -e "$command\n"
  fi 

  #Execution of command.
  http_resp=$(eval $command  2>&1)
  cmd_exit_status="$?"
  
  
  if ((debug))
  then
   echo -e "\nHTTP response:\n $http_resp\n"
  fi 

  #Evaluate response.
  #redirects=$(echo "$http_resp" | egrep -c ' 302 ')
  #(( "$redirects" != 7 )) ||
  if   echo "$http_resp" | grep -q "text/html"  ||  (( $cmd_exit_status != 0 ))   
  then
   rm "$filename"
   download_http_sec_retry     
  fi #if error during http basic authentication. 
  
}


download() {
    wget="wget ${insecure:+--no-check-certificate} ${quiet:+-q} ${quiet:--v} -c ${force_TLSv1:+--secure-protocol=TLSv1} $PKI_WGET_OPTS"
    
    while read line
    do
        # read csv here document into proper variables
        eval $(awk -F "' '" '{$0=substr($0,2,length($0)-2); $3=tolower($3); print "file=\""$1"\";url=\""$2"\";chksum_type=\""$3"\";chksum=\""$4"\""}' <(echo $line) )

        #Process the file
        echo -n "$file ..."

        #get the cached entry if any.
        cached="$(grep -e "^$file" "$CACHE_FILE")"
        
        #if we have the cache entry but no file, clean it.
        if [[ ! -f $file && "$cached" ]]; then
            #the file was removed, clean the cache
            remove_from_cache "$file"
            unset cached
        fi
        
        #check it wasn't modified
        if [[ -n "$cached" && "$(get_mod_time_ $file)" == $(echo "$cached" | cut -d ' ' -f2) ]]; then
                    if [[ "$chksum" == "$(echo "$cached" | cut -d ' ' -f3)" ]]; then
                echo "Already downloaded and verified"
                continue
            elif ((update_files)); then
                #user want's to overwrite newer files
                rm $file
                remove_from_cache "$file"
                unset cached
            else
                #file on server is different from what we have. 
                echo "WARNING: The remote file was changed (probably a new version is available). Use -U to Update/overwrite"
                continue
            fi
        fi
        unset chksum_err_value chksum_err_count
        
        while : ; do
            # (if we had the file size, we could check before trying to complete)
            echo "Downloading"
            [[ ! -d "$(dirname "$file")" ]] && mkdir -p "$(dirname "$file")"
            if ((dry_run)); then
                #all important info was already displayed, if in dry_run mode just abort
                #No status will be stored
                break
            else
                if ((use_http_sec))
                then
                 download_http_sec
                 if ((failed))
                 then
                  break
                 fi
                else
                 $wget -O "$file" $url || { failed=1; break; }  
                fi                
            fi

            #check if file is there
            if [[ -f $file ]]; then
                ((debug)) && echo file found
                if [[ ! "$chksum" ]]; then
                    echo "Checksum not provided, can't verify file integrity"
                    break
                fi
                result_chksum=$(check_chksum "$file" $chksum_type $chksum)
                if [[ "$result_chksum" != "$chksum" ]]; then
                    echo "  $chksum_type failed!"
                    if ((clean_work)); then
                        if !((chksum_err_count)); then
                                chksum_err_value=$result_chksum
                                chksum_err_count=2
                            elif ((checksum_err_count--)); then
                                if [[ "$result_chksum" != "$chksum_err_value" ]]; then
                                    #this is a real transmission problem
                                    chksum_err_value=$result_chksum
                                    chksum_err_count=2
                                fi
                            else
                                #ok if here we keep getting the same "different" checksum
                                echo "The file returns always a different checksum!"
                                echo "Contact the data owner to verify what is happening."
                                echo
                                sleep 1
                                break
                            fi
                        
                            rm $file
                            #try again
                            echo -n "  re-trying..."
                            continue
                    else
                            echo "  don't use -p or remove manually."
                    fi
                else
                    echo "  $chksum_type ok. done!"
                    echo "$file" $(get_mod_time_ "$file") $chksum >> $CACHE_FILE
                fi
            fi
            #done!
            break
        done
        
        if ((failed)); then
            echo "download failed"
            # most common failure is certificate expiration, so check this
            #if we have the pasword we can retrigger download
            ((!skip_security)) && [[ "$pass" ]] && check_cert
            unset failed
        fi
        
done <<<"$download_files"

}

dedup_cache_() {
    local file=${1:-${CACHE_FILE}}
    ((debug)) && echo "dedup'ing cache ${file} ..."
    local tmp=$(LC_ALL='C' sort  -r -k1,2 $file | awk '!($1 in a) {a[$1];print $0}' | sort -k2,2)
    ((DEBUG)) && echo "$tmp"
    echo "$tmp" > $file
    ((debug)) && echo "(cache dedup'ed)"
}

http_basic_auth_func_info_message()
{
  echo  "********************************************************************************"
  echo  "*                                                                              *"
  echo  "* Note that new functionality to allow authentication without the need for     *"
  echo  "* certificates is available with this version of the wget script.  To enable,  *"
  echo  "* use the \"-H\" option and enter your OpenID and password when prompted:        *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -H [options...]                                     *"
  echo  "*                                                                              *"
  echo  "* For a full description of the available options use the help option:         *"
  echo  "*                                                                              *"
  echo  "* $ "$(basename "$0")" -h                                                  *"
  echo  "*                                                                              *"
  echo  "********************************************************************************"
}

#
# MAIN
#

if ((!use_http_sec))
then 
 http_basic_auth_func_info_message
fi

echo "Running $(basename $0) version: $version"
((verbose)) && echo "we use other tools in here, don't try to user their proposed 'options' directly"
echo "Use $(basename $0) -h for help."$'\n'

((debug)) && cat<<EOF
** Debug info **
ESG_HOME=$ESG_HOME
ESG_CREDENTIALS=$ESG_CREDENTIALS
ESG_CERT_DIR=$ESG_CERT_DIR
** -- ** -- ** -- ** --

EOF


cat <<'EOF-MESSAGE'
Script created for 77 file(s)
(The count won't match if you manually edit this file!)



EOF-MESSAGE
sleep 1

check_os
((!skip_security)) && find_credentials

if ((use_http_sec))
then 
     
 if (( ! insecure))
 then 
  get_certificates
 fi

 #Cookies folder.
 COOKIES_FOLDER="$ESG_HOME/wget_cookies"
 
 if (( force ))
 then
  if [ -d $COOKIES_FOLDER ] 
  then
   rm -rf $COOKIES_FOLDER
  fi
 fi

 #Create cookies folder. 
 if [[ ! -d $COOKIES_FOLDER ]] 
 then
  mkdir $COOKIES_FOLDER
 fi
 
 if((! use_cookies_for_http_basic_auth_start))
 then

  #Read openid.
  if [[ ! -z "$openId" ]]
  then
   openid_c="$openId"
  elif ( (("$#" > 1)) || (("$#" == 1)) ) 
  then
   openid_c=$1
  else
   read -p    "Enter your openid : " openid_c
  fi
  
  
  #Read username.
  if [[ ! -z "$username_supplied" ]]
  then
   username_c="$username_supplied"
  elif (("$#" == 2))
  then
   username_c=$2
  elif [[ "$openid_c" == */openid/ || "$openid_c" == */openid ]]
  then
   read -p    "Enter username : " username_c
  fi
  
  #Read password.
  read -s -p "Enter password : " password_c
  echo -e "\n"

 fi #use cookies

fi #use_http_sec 


#do we have old results? Create the file if not
[ ! -f $CACHE_FILE ] && echo "#filename mtime checksum" > $CACHE_FILE && chmod 666 $CACHE_FILE

#clean the force parameter if here (at htis point we already have the certificate)
unset force

download

dedup_cache_


echo "done"
